链表part2
1. 两两交换链表中的元素
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        //虚拟头结点
        ListNode* dummyHead = new ListNode(0);
        dummyHead->next = head; //虚拟头节点指向头节点
        //目前指针指向头节点
        ListNode* cur = dummyHead;
        while(cur->next!= nullptr && cur->next->next != nullptr){ //先是next，为了避免出现空指针
            ListNode* tmp = cur-> next; //第一个节点
            ListNode* tmp1 = cur-> next -> next-> next;
            //头指针指向第二个
            cur->next = cur->next->next; //无法获取第一个指针
            //第二个节点指向第一个
            cur->next->next = tmp; //第三个节点无法获取
            cur->next->next->next = tmp1;

            cur = cur->next->next;

        }   
        ListNode* result = dummyHead-> next;
        delete dummyHead;
        return result;
    }
};
19 删除倒数第n个
双指针法
快指针移到末尾，慢指针移到第n个节点
要删除第n个节点，就要知道它的前一个
慢指针指向倒数第n+1个节点
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        //设置虚拟头结点
        ListNode* dummyHead = new ListNode(0);
        dummyHead-> next = head; 
        ListNode* fast = dummyHead;
        ListNode* slow = dummyHead;
        //先移动 fast
        while(n-- && fast != nullptr){
            fast = fast-> next;
        }
        fast = fast-> next; //n+1
        while(fast!=nullptr){
            fast = fast-> next;
            slow = slow-> next;
        }    
        slow-> next = slow->next->next; 
        return dummyHead->next;
    }
    
};
链表相交
1. 两个链表有长度查 
2. 相等是指指针相等
3. 把长链表和短链表的尾端对齐
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode* curA = headA;
        ListNode* curB = headB;
        int lenA = 0; 
        int lenB= 0;
        //求A 长度
        while(curA != nullptr){
            lenA++;
            curA = curA->next;
        }
        //求B长度
         while(curB != nullptr){
            lenB++;
            curB = curB->next;
        }
        //回归head
        curA = headA;
        curB= headB;
       // A为最长链表的头以及lenA为长链表的长度
        if(lenB>lenA){
            swap(curA,curB);
            swap(lenA,lenB);
        }
        int gap = lenA-lenB;
        //同一起点
        while(gap--){
            curA = curA->next;
        }

        while(curA != NULL){
            if(curA==curB){
            return curA;
           }
           else{
             curA = curA->next;
            curB = curB->next;
           }
        }
         return NULL;
    }
        
};

142 环形链表
环形链表要求： 1，判断是否有环
2. 判断环的入口
判断是否有环：双指针
快指针走两步，慢指针走一步
快指针和慢指针相遇
环的入口：头节点出发的指针和相遇节点出发的指针 会在入口相遇
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode* fast = head;
        ListNode* slow = head;//定义快慢指针
        while(fast!= NULL && fast->next!=NULL){ //快指针和快指针的下一个都不能为空 否则会出现空指针
            slow = slow->next;
            fast = fast->next->next;
            if(fast == slow){
                ListNode* index1 = slow;
                ListNode* index2 = head;
                while(index1 != index2){
                    index1 = index1->next;
                    index2 = index2->next;
                }
                return index2;
            }
        }
        return NULL;
    }
};

